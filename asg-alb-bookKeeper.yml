AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Create an Auto Scaling Group with an existing subnet, a Launch Template,
  and attach an Application Load Balancer (ALB)

Resources:

  # Security Group for EC2 Instances
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # Security Group for ALB
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  # Elastic IP for NAT Gateway
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # NAT Gateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # Private Route Table and subnet associations
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # ALB
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: demoALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  # ALB Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: demoTargetGroup
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 80
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 100
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance

  # ALB Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # Launch Template for EC2 Instances
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        InstanceType: t2.micro
        KeyName: !Ref KeyPair
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData: !Base64
          Fn::Sub: |
            #!/bin/bash
            apt update -y
            apt install -y nginx
            systemctl start nginx
            systemctl enable nginx
        ImageId: ami-0522ab6e1ddcc7055 # Replace with your region-specific AMI

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '1'
      TargetGroupARNs:
        - !Ref TargetGroup

# Outputs
Outputs:
  LoadBalancerDNSName:
    Description: The DNS name of the ALB
    Value: !GetAtt LoadBalancer.DNSName

# Parameters for VPC, Subnets, and KeyPair
Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID

  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: The Subnet ID for Availability Zone 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: The Subnet ID for Availability Zone 2

  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: The Subnet ID for Availability Zone 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: The Subnet ID for Availability Zone 1

  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The EC2 Key Pair to allow SSH access to the instances